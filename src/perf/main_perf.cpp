// Copyright 2025 The MWC Developers
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <iostream>
#include "../miner/cuckatoo.h"
#include <random>
#include "../miner/miner_network.h"
#include "../miner/events_tracker.h"
#include "../miner/thread_pool.h"
//#include "../metal_code_test/metal_st1_build_buckets.h"
#include "../tests/test_mem_pool.h"
#include "../miner/events_tracker.h"
#include "../miner/sip_hash.h"
#include "../miner/cycle.h"

int main(int argc, char* argv[]) {
    // Parse command-line arguments

    test_mem_pool();

    std::cout << "Starting C31 perf test (multiple run)" << std::endl;

    CuckatooSolver<31, 42> solver;

    //std::random_device rd;
    std::mt19937_64 nonce_gen(123); // Fixed seed
    std::uniform_int_distribution<uint64_t> uint64_dist(0, UINT64_MAX);

    // Init task with a real POW
    CuckaJob task;
    task.prePow = {0x0, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x14, 0xce, 0x8, 0x0, 0x0, 0x0, 0x0, 0x62, 0xbe, 0x77, 0x5, 0x0, 0xa,
        0xdf, 0xbb, 0x47, 0x41, 0x7, 0x8b, 0x65, 0x1, 0xdd, 0x96, 0xfd, 0x2c, 0x3e, 0x7b, 0xa4, 0x19, 0xbf, 0x8, 0xc7, 0x73,
        0x8d, 0xa4, 0x2a, 0xd6, 0x4, 0x53, 0x60, 0xbc, 0x30, 0xa6, 0xa1, 0xdf, 0xe7, 0xc5, 0x50, 0x81, 0x10, 0xa7, 0xcb, 0x2,
        0xd4, 0xe4, 0xb5, 0x55, 0x5b, 0x9a, 0xf3, 0x3b, 0x68, 0xa4, 0x4c, 0x11, 0x77, 0x2a, 0xbb, 0x4f, 0x5, 0x8b, 0x2e, 0xfe,
        0x68, 0x21, 0x1b, 0xcf, 0x36, 0xdb, 0xf9, 0x37, 0x95, 0xa9, 0xcf, 0xe0, 0x35, 0x78, 0x62, 0x56, 0x46, 0x91, 0x26, 0xd1,
        0x3d, 0xe7, 0xda, 0x70, 0xe2, 0x2c, 0x20, 0x6f, 0x8b, 0xe8, 0xd6, 0xc8, 0x34, 0x99, 0x15, 0xf, 0x47, 0x8e, 0x72, 0x3d,
        0x8a, 0x49, 0x33, 0xad, 0xaa, 0x80, 0xac, 0x17, 0x8c, 0x33, 0xf5, 0x73, 0x8, 0xac, 0x67, 0xb7, 0xe5, 0x17, 0xc5, 0xc2,
        0xf7, 0x3f, 0x3f, 0xa0, 0xd4, 0xc2, 0xae, 0xe0, 0xef, 0x24, 0x8f, 0x52, 0xda, 0x21, 0x52, 0x48, 0x4a, 0xe9, 0x5a, 0xbf,
        0x2f, 0xf3, 0xc9, 0x42, 0xfb, 0xd2, 0xca, 0x87, 0x1c, 0x72, 0x51, 0x9d, 0x7f, 0xcc, 0xa2, 0x5, 0x51, 0xf0, 0xd5, 0x94,
        0xfb, 0xd4, 0xda, 0x5, 0xca, 0x2a, 0x67, 0x5e, 0x39, 0xbb, 0x65, 0x7c, 0x65, 0xab, 0x6e, 0xf, 0xd3, 0x41, 0x82, 0x2d,
        0xc5, 0xc9, 0x99, 0xd8, 0x4e, 0x79, 0x94, 0x21, 0xa5, 0x1a, 0x0, 0x0, 0x0, 0x0, 0x0, 0x36, 0x4f, 0xa7, 0x0, 0x0, 0x0,
        0x0, 0x0, 0x2d, 0x8c, 0xef, 0x0, 0x0, 0x93, 0xef, 0x62, 0x47, 0xe5, 0x49, 0x0, 0x0, 0x0, 0xd};


    uint64_t hash_with_solution[4] = {0xcdc22e3228ae6ce4,0x9b702732c5917f3a,0x987dab75b205767,0x358d6c79d4355934};

    // Just for testing...
    uint32_t nonces[42] = {0xc8f796, 0x1197e14, 0x27c89d0, 0x34545c9, 0x99c666b, 0xab8842b, 0xc494105, 0xd852875, 0xe36538c, 0x1ae83e29,
0x1cd5aff3, 0x2403041f, 0x251ddeac, 0x26707d0c, 0x26bc95da, 0x2741c49c, 0x2a5c3ef8, 0x2da2c43c, 0x2da9da6a, 0x3784c087,
0x3b2b5256, 0x3b48866e, 0x3c5dda2b, 0x3f734438, 0x46b697b3, 0x485d0fcf, 0x4cca8a3c, 0x51cc2a3b, 0x55ffc9fb, 0x5644ef16,
0x5d6be12d, 0x63105f34, 0x67be1234, 0x69486f7a, 0x6b824b43, 0x6f003327, 0x73406ea8, 0x75c7ee1b, 0x76b26669, 0x7b14a82f,
0x7ba23917, 0x7f8d3427};

    for (int ni=0; ni<42; ni++) {
        uint32_t hash1 = sip_hash(hash_with_solution, uint64_t(nonces[ni])*2) & 0x7FFFFFFF;
        uint32_t hash2 = sip_hash(hash_with_solution, uint64_t(nonces[ni])*2 +1) & 0x7FFFFFFF;
        std::cout << std::hex << nonces[ni] << " Hashes: " << hash1 << "," << hash2 << std::endl;
    }
    std::cout << std::dec;

    int threads_num = std::thread::hardware_concurrency();
    ThreadPool thread_pool(threads_num);

    for (int i=0;i<1;i++) {
        std::cout << "Iteration " << i << std::endl;

        // Wait for a job
/*        uint64_t nonce = uint64_dist(nonce_gen);
        uint64_t v[4];
        task.calculate_seed_hash(nonce, v);
*/
        // Starting cucckatoo calculations...
        solver.test_build_all(hash_with_solution);
    }

    return 0;
}